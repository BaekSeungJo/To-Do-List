name: Codex CI

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '20'
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs='-Xmx2g -XX:+UseG1GC'

jobs:
  backend:
    name: API (Gradle + ArchUnit + Testcontainers)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make Gradle executable
        run: chmod +x ./gradlew

      - name: Verify (compile + unit + ArchUnit + integration)
        run: ./gradlew clean build --scan --info

      - name: Test Reports (JUnit)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-reports
          path: |
            api/build/reports/tests/test
            api/build/test-results/test

  frontend:
    name: Web (Next.js + Playwright)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run unit tests
        run: npm test --if-present

      - name: Run e2e tests (Playwright)
        run: npx playwright test
        env:
          # 백엔드가 별도로 떠있지 않은 경우 Mock API를 사용하거나 .env 설정 필요
          NODE_ENV: test

      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: web-playwright-report
          path: web/playwright-report
          if-no-files-found: ignore

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
      - name: Mark pipeline success
        run: echo "All checks passed."
